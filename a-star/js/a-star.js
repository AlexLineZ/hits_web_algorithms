import { map } from "./table.js";
import { disableButtons, enableButtons, isInside, sleep, clearPath } from "./a-star_functions.js";
import { start, finish, Node } from "./a-star_functions.js";

// –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
export async function aStar() {

    disableButtons();

    // —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω)
    function heuristic(v, end) {
        return Math.abs(v.x - end.x) + Math.abs(v.y - end.y);
    }

    // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫
    function compare(a, b) {
        if (a.sumDistances < b.sumDistances)
            return -1;
        if (a.sumDistances > b.sumDistances)
            return 1;
        else
            return 0;
    }

    let size = document.getElementById('tableSize').value;

    // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∏–ø–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
    let count = 0;

    // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞.
    if(start.x == null || start.y == null){
        start.x = 0;
        start.y = 0;
        table.rows[0].cells[0].dataset.mode = 'start';
    }
    if(finish.x == null || finish.y == null){
        finish.x = size - 1;
        finish.y = size - 1;
        table.rows[size - 1].cells[size - 1].dataset.mode = 'finish';
    }

    clearPath();

    let stNode = new Node();
    stNode.x = Number(start.x);
    stNode.y = Number(start.y);

     // —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫, –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–µ
    let openList = new Array;
    openList.push(stNode)

     // —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    let usedList = new Array;

    let current = new Node();

    // –ü–æ–∫–∞ –µ—Å—Ç—å –∫–ª–µ—Ç–∫–∏ –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–∫–∞—Ç—å –ø—É—Ç—å –¥–æ —Ñ–∏–Ω–∏—à–∞
    while (openList.length > 0) {
        openList.sort(compare);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —è—á–µ–π–∫—É (–±–µ—Ä–µ–º —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º sumDistances) –∏ —É—Å—ã–ø–ª—è–µ–º –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—É—Ç–∏
        current = openList[0];
        openList.splice(openList.indexOf(current), 1);
        usedList.push(current);
        if(count >= Math.floor(size / 10)){
            await sleep(101 - Number(document.getElementById('animationSpeed').value));
            count = 0;
        }
        count++;
        if (!(current.x == start.x && current.y == start.y) && !(current.x == finish.x && current.y == finish.y)) {
            document.getElementById("table").rows[current.y].cells[current.x].dataset.mode = "checked";
        }


        // –ù–∞—à–ª–∏ —Ñ–∏–Ω–∏—à - –±—Ä–µ–π–∫ ü§ôüèª
        if (current.x == finish.x && current.y == finish.y) {
            break;
        }

        //  –ü—Ä–æ—á–µ–∫–∞—Ç—å —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–π —è—á–µ–π–∫–∏
        let directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];
        for (let dir = 0; dir < directions.length; dir++) {
            var newNeighbour = new Node();
            newNeighbour.x = current.x + directions[dir][0];
            newNeighbour.y = current.y + directions[dir][1];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å–µ–¥–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–∞—Ö
            let isUsed = usedList.find(node => (node.x == newNeighbour.x && node.y == newNeighbour.y));
            let neighbour = openList.find(node => (node.x == newNeighbour.x && node.y == newNeighbour.y));

            // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ openList –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            if (isInside(newNeighbour.x, newNeighbour.y, size) && map[newNeighbour.y][newNeighbour.x] === 0 && isUsed == null) {
                if (neighbour == null) {

                    if(!(newNeighbour.x == finish.x && newNeighbour.y == finish.y))
                        table.rows[newNeighbour.y].cells[newNeighbour.x].dataset.mode = 'checking';

                    newNeighbour.distanceToStart = current.distanceToStart + 1;
                    newNeighbour.distanceToFinish = heuristic(newNeighbour, finish);
                    newNeighbour.sumDistances = newNeighbour.distanceToStart + newNeighbour.distanceToFinish;

                    newNeighbour.parent = current;
                    openList.push(newNeighbour);
                    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ openList –ø–æ–º–µ–Ω—è—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Å—Ç–∞—Ä—Ç–∞ –µ—Å–ª–∏ –Ω–∞–¥–æ
                } else {
                    if (neighbour.distanceToStart >= current.distanceToStart + 1) {
                        openList[openList.indexOf(neighbour)].distanceToStart = current.distanceToStart + 1;
                        openList[openList.indexOf(neighbour)].parent = current;
                    }
                }

            }
        }
    }

    // –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∏–Ω–∏—à - –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!(current.x == finish.x && current.y == finish.y)) {
        alert(`–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å üò≠`);
    // –ù–∞–π–¥–µ–Ω - –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø—É—Ç—å
    } else {
        for(;current.parent != null; current = current.parent) {

            if(count >= Math.floor(size / 10)){
                await sleep(101 - Number(document.getElementById('animationSpeed').value));
                count = 0;
            }
            count++;

            if (!(current.x == finish.x && current.y == finish.y))
                document.getElementById("table").rows[current.y].cells[current.x].dataset.mode = "path"
        }
    }

    enableButtons()
}